import difflib
import html
import logging
from datetime import datetime

from aiohttp import ClientSession

from config import API_KEY

logger = logging.getLogger(__name__)


def validate_text_field(text: str, max_len: int):
    # –û–±—Ä—ñ–∑–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –∑ –æ–±–æ—Ö –±–æ–∫—ñ–≤
    text = text.strip()
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ–ª–µ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
    if not text:
        return False, "Field cannot be empty."
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â—É—î –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É
    if len(text) > max_len:
        return False, f"Too long (max {max_len} characters)."
    return True, text


def format_film_info(name, info):
    text = (
        f"üé¨ <b>{html.escape(name)}</b> ({info['year']})\n"
        f"üé≠ Genre: {html.escape(str(info['genre']))}\n"
        f"‚≠ê Rating: {info['rating']}/10\n"
        f"üìù Description: {html.escape(str(info['description']))}\n"
        f"üè∑Ô∏è Tag: {html.escape(str(info.get('tag', 'Not set')))}"
    )
    review = info.get("review")
    if review:
        review_lower = review.lower()
        if review_lower == "like":
            text += f"\nüóíÔ∏è Review: üëç"
        elif review_lower == "dislike":
            text += f"\nüóíÔ∏è Review: üëé"

    if info.get("poster_url"):
        text += f"\n<a href=\"{html.escape(info['poster_url'])}\">Poster</a>"
    if info.get("trailer"):
        text += f"\n<a href=\"{html.escape(info['trailer'])}\">Trailer</a>"
    return text


def is_valid_year(year: int, min_year=1888, max_year=None):
    if max_year is None:
        max_year = datetime.now().year + 5
    return min_year <= year <= max_year


def is_valid_rating(rating: float):
    return 1 <= rating <= 10


def find_similar_films_by_description(user_input, films, threshold=0.2, top_n=5):
    user_input = user_input.strip().lower()
    matched = []
    for name, info in films.items():
        description = str(info.get("description", "")).lower()
        similarity = difflib.SequenceMatcher(None, user_input, description).ratio()
        if similarity >= threshold:
            matched.append((similarity, name, info))
    matched.sort(reverse=True)
    return matched[:top_n]


async def search_tmdb_film(name, user_language):
    try:
        # –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –º–æ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ñ–æ—Ä–º–∞—Ç–∞–º TMDB
        lang_map = {"ru": "ru-RU", "en": "en-US", "uk": "uk-UA"}
        tmdb_lang = lang_map.get(user_language[:2], "en-US")  # –í–∏–±—ñ—Ä –º–æ–≤–∏ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç

        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É —Å–µ—Å—ñ—é HTTP –∫–ª—ñ—î–Ω—Ç–∞
        async with ClientSession() as session:
            # –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É
            search_url = "https://api.themoviedb.org/3/search/movie"
            params = {"api_key": API_KEY, "query": name, "language": tmdb_lang}
            # –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–æ—à—É–∫ —Ñ—ñ–ª—å–º—É
            async with session.get(search_url, params=params) as resp:
                if resp.status != 200:
                    # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø–æ—à—É–∫—É
                    logging.error(
                        f"–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É '{name}': —Å—Ç–∞—Ç—É—Å {resp.status}"
                    )
                    return None, None, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ TMDB."
                data = await resp.json()

            results = data.get("results", [])
            if not results:
                return None, None, "–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

            film = results[0]
            film_id = film["id"]

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ñ—ñ–ª—å–º
            details_url = f"https://api.themoviedb.org/3/movie/{film_id}"
            async with session.get(
                details_url, params={"api_key": API_KEY, "language": tmdb_lang}
            ) as resp:
                if resp.status != 200:
                    logging.error(
                        f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π —Ñ—ñ–ª—å–º—É ID {film_id}: —Å—Ç–∞—Ç—É—Å {resp.status}"
                    )
                    return None, None, "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ç–∞–ª—ñ —Ñ—ñ–ª—å–º—É."
                details = await resp.json()

            trailer = None
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ (—Ç—Ä–µ–π–ª–µ—Ä—ñ–≤)
            videos_url = f"https://api.themoviedb.org/3/movie/{film_id}/videos"
            async with session.get(
                videos_url, params={"api_key": API_KEY, "language": "en-US"}
            ) as resp:
                if resp.status != 200:
                    # –Ø–∫—â–æ –≤—ñ–¥–µ–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ‚Äî –ª–æ–≥—É–≤–∞—Ç–∏, –∞–ª–µ –Ω–µ –ø—Ä–∏–ø–∏–Ω—è—Ç–∏
                    logging.error(
                        f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–µ–æ –¥–ª—è —Ñ—ñ–ª—å–º—É ID {film_id}: —Å—Ç–∞—Ç—É—Å {resp.status}"
                    )
                    trailer = None
                else:
                    videos_data = await resp.json()
                    for video in videos_data.get("results", []):
                        if video["type"] == "Trailer" and video["site"] == "YouTube":
                            trailer = f"https://www.youtube.com/watch?v={video['key']}"
                            break

            # –í–∏—Ç—è–≥—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –ø—Ä–æ —Ñ—ñ–ª—å–º
            title = details.get("title", "No name")
            year = details.get("release_date", "")[:4]
            genres = ", ".join([g["name"] for g in details.get("genres", [])])
            rating = round(float(details.get("vote_average", 0)), 1)
            overview = details.get("overview", "No description.")
            poster_url = (
                f"https://image.tmdb.org/t/p/w500{details['poster_path']}"
                if details.get("poster_path")
                else None
            )

            film_data = {
                "year": year,
                "genre": genres,
                "rating": rating,
                "description": overview,
                "poster_url": poster_url,
                "trailer": trailer,
            }

            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–∑–≤—É, —Å–ª–æ–≤–Ω–∏–∫ –∑ –¥–∞–Ω–∏–º–∏ —Ç–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
            return title, film_data, format_film_info(title, film_data)

    except Exception as e:
        # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–µ—Ä–π–æ–∑–Ω–æ—ó –ø–æ–º–∏–ª–∫–∏ –∑ —Ç—Ä–∞—Å—É–≤–∞–Ω–Ω—è–º —Å—Ç–µ–∫–∞
        logging.exception(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É '{name}': {e}")
        return None, None, f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—É: {e}"
